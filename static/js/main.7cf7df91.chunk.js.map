{"version":3,"sources":["TodoList.module.css","AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","AddItemForm","props","useState","inputNewValue","setInputNewValue","newStatusValue","setNewStatusValue","inputError","setInputError","errorDouble","setErrorDouble","className","s","borderColorForError","value","onChange","e","currentTarget","checkbox","checkBoxForNewInput","type","checked","onClick","trim","tasksTitle","find","el","addItem","todolistsTitle","colorForError","EditableSpan","activeModeForEdit","setActiveModeForEdit","title","setTitle","onBlur","onChangeHandlerForTaskTitle","autoFocus","onDoubleClick","TodoList","styleForTodolist","changeTitleForTask","id","marginToRemoveButton","removeTodoLists","tasks","map","st","addNewTask","t","key","isDone","completedTask","changeStatusTask","removeTaskFromTasks","filter","filterForTasks","changeStatusTodoList","App","td1","v1","td2","todolists","setTodolists","fl","tdFind","idTd","findTd","setTasks","newTitle","newStatus","newTask","status","task","td","todolist","filteredTasks","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7cf7df91.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"styleForTodolist\":\"TodoList_styleForTodolist__3ssp-\",\"marginToRemoveButton\":\"TodoList_marginToRemoveButton__1Sv-Q\",\"checkBoxForNewInput\":\"TodoList_checkBoxForNewInput__TguB3\",\"colorForError\":\"TodoList_colorForError__3qM11\",\"borderColorForError\":\"TodoList_borderColorForError__K1E4I\",\"filterForTasks\":\"TodoList_filterForTasks__Id49I\",\"completedTask\":\"TodoList_completedTask__3TIIU\"};","import React, {useState} from \"react\";\r\nimport s from \"./TodoList.module.css\";\r\n\r\ntype AddItemFormType = {\r\n    tasksTitle?: Array<string>\r\n    todolistsTitle?: Array<string>\r\n    checkbox?: boolean\r\n    addItem: (title: string, st: boolean) => void\r\n}\r\n\r\n\r\nexport function AddItemForm(props: AddItemFormType) {\r\ndebugger\r\n    let [inputNewValue, setInputNewValue] = useState<string>('');\r\n    let [newStatusValue, setNewStatusValue] = useState<boolean>(false);\r\n    let [inputError, setInputError] = useState<string | null>(null);\r\n    let [errorDouble, setErrorDouble] = useState<string | null>(null);\r\n\r\n    const addTask = () => {\r\n        if (inputNewValue.trim() !== '') {\r\n            if (props.checkbox) {\r\n                let doubleTask = props.tasksTitle?.find(el => el === inputNewValue)\r\n                if (doubleTask) {\r\n                    setErrorDouble('Already have this task')\r\n                } else {\r\n                    props.addItem(inputNewValue.trim(), newStatusValue)\r\n                    setInputNewValue('')\r\n                    setNewStatusValue(false)\r\n                    setErrorDouble(null)\r\n                    setInputError(null)\r\n                }\r\n            }\r\n            if (!props.checkbox) {\r\n                let doubleTd = props.todolistsTitle?.find(el => el === inputNewValue)\r\n                    if (doubleTd) {\r\n                        setErrorDouble('Already have this Todolist')\r\n                    } else {\r\n                        props.addItem(inputNewValue.trim(), newStatusValue)\r\n                        setInputNewValue('')\r\n                        setErrorDouble(null)\r\n                        setInputError(null)\r\n                }\r\n            }\r\n        } else {\r\n            setInputError('Enter the value')\r\n        }\r\n    }\r\n\r\n    const onChangeHandlerInputValue = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setInputError(null)\r\n        setErrorDouble(null)\r\n        setInputNewValue('')\r\n        setInputNewValue(e.currentTarget.value)\r\n    }\r\n    const onClickHandlerChangeNewStatus = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setNewStatusValue(e.currentTarget.checked)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input className={inputError || errorDouble ? s.borderColorForError : ''} value={inputNewValue}\r\n                   onChange={onChangeHandlerInputValue}/>\r\n            {props.checkbox && <input className={s.checkBoxForNewInput} type=\"checkbox\" checked={newStatusValue}\r\n                                      onChange={onClickHandlerChangeNewStatus}/>}\r\n            <button onClick={addTask}>+</button>\r\n            {inputError && <div className={s.colorForError}>{inputError}</div>}\r\n            {errorDouble && <div className={s.colorForError}>{errorDouble}</div>}\r\n        </div>\r\n    )\r\n}","import React, {useState} from \"react\";\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    onChangeHandlerForTaskTitle: (value: string) => void\r\n}\r\n\r\nfunction EditableSpan(props: EditableSpanType) {\r\n\r\n    let [activeModeForEdit, setActiveModeForEdit] = useState<boolean>(false);\r\n    let [title, setTitle] = useState('');\r\n\r\n    const activateModeHandler = () => {\r\n        setActiveModeForEdit(true)\r\n        setTitle(props.title)\r\n    }\r\n    const disableActivateModeHandler = () => {\r\n        setActiveModeForEdit(false)\r\n        props.onChangeHandlerForTaskTitle(title)\r\n    }\r\n    const onChangeHandlerValue = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        activeModeForEdit ?\r\n            <input value={title} onBlur={disableActivateModeHandler} autoFocus onChange={onChangeHandlerValue}/> :\r\n            <span onDoubleClick={activateModeHandler}>{props.title}</span>\r\n    )\r\n}\r\n\r\nexport default EditableSpan","import React from \"react\";\r\nimport s from './TodoList.module.css'\r\nimport {FilterType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterType\r\n    removeTaskFromTasks: (idTd: string, id: string) => void\r\n    addNewTask: (id: string, newTitle: string, newStatus: boolean) => void\r\n    changeStatusTask: (idTd: string, id: string, status: boolean) => void\r\n    changeStatusTodoList: (id: string, fl: FilterType) => void\r\n    removeTodoLists: (idTd: string) => void\r\n    changeTitleForTask: (idTd: string, value: string, id: string) => void\r\n}\r\n\r\nfunction TodoList(props: TodoListType) {\r\n\r\n    const addTask = (title: string, st: boolean) => {\r\n        props.addNewTask(props.id, title, st)\r\n    }\r\n\r\n    const onClickSetFilterToAll = () => {\r\n        props.changeStatusTodoList(props.id, 'all')\r\n    }\r\n    const onClickSetFilterToActive = () => {\r\n        props.changeStatusTodoList(props.id, 'active')\r\n    }\r\n    const onClickSetFilterToCompleted = () => {\r\n        props.changeStatusTodoList(props.id, 'completed')\r\n    }\r\n    const onClickHandlerRemoveTodoList = () => {\r\n        props.removeTodoLists(props.id)\r\n    }\r\n\r\n    const onChangeHandlerForTdTitle = (value: string) => {\r\n        props.changeTitleForTask(props.id, value, 'undefined')\r\n    }\r\n\r\n    return (\r\n        <div className={s.styleForTodolist}>\r\n            <h3>\r\n                <EditableSpan\r\n                    title={props.title}\r\n                    onChangeHandlerForTaskTitle={onChangeHandlerForTdTitle}\r\n                />\r\n                <button className={s.marginToRemoveButton} onClick={onClickHandlerRemoveTodoList}>x</button>\r\n            </h3>\r\n\r\n            <AddItemForm\r\n                tasksTitle={props.tasks.map(el => el.title)}\r\n                addItem={addTask}\r\n                checkbox\r\n            />\r\n\r\n            <ul>\r\n                {\r\n                    props.tasks.map(t => {\r\n\r\n                        const onClickRemoveTaskFromTodolist = () => {\r\n                            props.removeTaskFromTasks(props.id, t.id)\r\n                        }\r\n                        const onClickChangeStatusForTask = (e: React.MouseEvent<HTMLInputElement>) => {\r\n                            props.changeStatusTask(props.id, t.id, e.currentTarget.checked)\r\n                        }\r\n\r\n                        const onChangeHandlerForTaskTitle = (value: string) => {\r\n                            props.changeTitleForTask(props.id, value, t.id)\r\n                        }\r\n\r\n                        return (\r\n                            <li key={t.id} className={t.isDone ? s.completedTask : ''}>\r\n                                <input type=\"checkbox\" checked={t.isDone} onClick={onClickChangeStatusForTask}/>\r\n                                <EditableSpan\r\n                                title={t.title}\r\n                                onChangeHandlerForTaskTitle={onChangeHandlerForTaskTitle}\r\n                                />\r\n                                <button className={s.marginToRemoveButton}\r\n                                        onClick={onClickRemoveTaskFromTodolist}>x\r\n                                </button>\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <button className={props.filter === 'all' ? s.filterForTasks : ''} onClick={onClickSetFilterToAll}>All\r\n                </button>\r\n                <button className={props.filter === 'active' ? s.filterForTasks : ''}\r\n                        onClick={onClickSetFilterToActive}>Active\r\n                </button>\r\n                <button className={props.filter === 'completed' ? s.filterForTasks : ''}\r\n                        onClick={onClickSetFilterToCompleted}>Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {v1} from \"uuid\";\r\nimport TodoList, {TaskType} from \"./TodoList\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\n\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\ntype TodolistsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    let td1 = v1()\r\n    let td2 = v1()\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistsType>>([\r\n        {id: td1, title: 'What to learn', filter: 'all'},\r\n        {id: td2, title: 'What to buy', filter: 'all'}\r\n    ]);\r\n\r\n    const addNewTodolist = (title: string) => {\r\n        let todolist: TodolistsType = {id: v1(), title: title, filter: 'all'}\r\n        setTodolists([todolist, ...todolists])\r\n        setTasks({...tasks, [todolist.id]: []})\r\n    }\r\n\r\n    const changeStatusTodoList = (id: string, fl: FilterType) => {\r\n        let tdFind = todolists.find(el => el.id === id)\r\n        if (tdFind) {\r\n            tdFind.filter = fl\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    const removeTodoLists = (idTd: string) => {\r\n        let findTd = todolists.filter(el => el.id !== idTd)\r\n        setTodolists([...findTd])\r\n        delete tasks[idTd]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [td1]: [{id: v1(), title: 'HTML', isDone: true},\r\n            {id: v1(), title: 'CSS', isDone: true},\r\n            {id: v1(), title: 'React', isDone: false}\r\n        ],\r\n        [td2]: [{id: v1(), title: 'Bread', isDone: true},\r\n            {id: v1(), title: 'Milk', isDone: true},\r\n            {id: v1(), title: 'Books', isDone: false}\r\n        ]\r\n    });\r\n\r\n    const addNewTask = (id: string, newTitle: string, newStatus: boolean) => {\r\n        let newTask = {id: v1(), title: newTitle, isDone: newStatus}\r\n        tasks[id] = [newTask, ...tasks[id]]\r\n        setTasks({...tasks})\r\n    }\r\n    const removeTaskFromTasks = (idTd: string, id: string) => {\r\n        tasks[idTd] = tasks[idTd].filter(el => el.id !== id)\r\n        setTasks({...tasks})\r\n    }\r\n    const changeStatusTask = (idTd: string, id: string, status: boolean) => {\r\n        let task = tasks[idTd].find(el => el.id === id)\r\n        if (task) {\r\n            task.isDone = status\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    const changeTitleForTask = (idTd: string, value: string, id: string) => {\r\n        if (id !== \"undefined\") {\r\n            let td = tasks[idTd].find(el => el.id === id)\r\n            if (td) {\r\n                td.title = value\r\n                setTasks({...tasks})\r\n            }\r\n        } if (id === \"undefined\") {\r\n            let td = todolists.find(el => el.id === idTd)\r\n            if (td) {\r\n                td.title = value\r\n                setTasks({...tasks})\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            <div className={'styleForTodolist'}>\r\n                <AddItemForm\r\n                    addItem={addNewTodolist}\r\n                    todolistsTitle={todolists.map(el => el.title)}\r\n                />\r\n            </div>\r\n            {\r\n                todolists.map(t => {\r\n\r\n                    let filteredTasks = tasks[t.id]\r\n                    if (t.filter === 'active') {\r\n                        filteredTasks = filteredTasks.filter(el => !el.isDone)\r\n                    }\r\n                    if (t.filter === 'completed') {\r\n                        filteredTasks = filteredTasks.filter(el => el.isDone)\r\n                    }\r\n\r\n                    return (\r\n                        <TodoList\r\n                            id={t.id}\r\n                            title={t.title}\r\n                            tasks={filteredTasks}\r\n                            filter={t.filter}\r\n                            removeTaskFromTasks={removeTaskFromTasks}\r\n                            addNewTask={addNewTask}\r\n                            changeStatusTask={changeStatusTask}\r\n                            changeStatusTodoList={changeStatusTodoList}\r\n                            removeTodoLists={removeTodoLists}\r\n                            changeTitleForTask={changeTitleForTask}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}