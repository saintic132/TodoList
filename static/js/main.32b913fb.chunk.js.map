{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx","TodoList.module.css"],"names":["AddItemForm","props","useState","inputNewValue","setInputNewValue","newStatusValue","setNewStatusValue","inputError","setInputError","errorDouble","setErrorDouble","clickAutoFocus","useRef","TextField","inputRef","id","label","checkbox","variant","value","onChange","e","currentTarget","error","helperText","onBlur","Checkbox","className","s","checkBoxForNewInput","checked","inputProps","Button","style","transform","maxWidth","maxHeight","minWidth","minHeight","onClick","trim","tasksTitle","find","el","current","focus","addItem","todolistsTitle","color","EditableSpan","activeModeForEdit","setActiveModeForEdit","title","setTitle","onChangeHandlerForTaskTitle","autoFocus","onDoubleClick","TodoList","styleForTodolist","changeTitleForTask","IconButton","aria-label","size","Delete","marginToRemoveButton","fontSize","removeTodoLists","tasks","map","st","addNewTask","t","key","isDone","completedTask","changeStatusTask","removeTaskFromTasks","filter","changeStatusTodoList","App","td1","v1","td2","todolists","setTodolists","fl","tdFind","idTd","findTd","setTasks","newTitle","newStatus","newTask","status","task","td","AppBar","position","Toolbar","edge","sx","mr","Typography","component","Container","fixed","Grid","container","padding","todolist","spacing","rowSpacing","columnSpacing","xs","sm","md","filteredTasks","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","module","exports"],"mappings":"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","file":"static/js/main.32b913fb.chunk.js","sourcesContent":["import React, {useRef, useState} from \"react\";\r\nimport s from \"./TodoList.module.css\";\r\nimport {Button, Checkbox, TextField} from \"@material-ui/core\";\r\n\r\ntype AddItemFormType = {\r\n    tasksTitle?: Array<string>\r\n    todolistsTitle?: Array<string>\r\n    checkbox?: boolean\r\n    addItem: (title: string, st: boolean) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormType) {\r\n    let [inputNewValue, setInputNewValue] = useState<string>('');\r\n    let [newStatusValue, setNewStatusValue] = useState<boolean>(false);\r\n    let [inputError, setInputError] = useState<string | null>(null);\r\n    let [errorDouble, setErrorDouble] = useState<string | null>(null);\r\n\r\n    let clickAutoFocus = useRef<any>(null)\r\n\r\n    const addTask = () => {\r\n        debugger\r\n        if (inputNewValue.trim() !== '') {\r\n            if (props.checkbox) {\r\n                let doubleTask = props.tasksTitle?.find(el => el === inputNewValue)\r\n                if (doubleTask) {\r\n                    setErrorDouble('Already have this task')\r\n                    clickAutoFocus.current?.focus()\r\n                } else {\r\n                    props.addItem(inputNewValue.trim(), newStatusValue)\r\n                    setInputNewValue('')\r\n                    setNewStatusValue(false)\r\n                    setErrorDouble(null)\r\n                    setInputError(null)\r\n                }\r\n            }\r\n            if (!props.checkbox) {\r\n                let doubleTd = props.todolistsTitle?.find(el => el === inputNewValue)\r\n                if (doubleTd) {\r\n                    setErrorDouble('Already have this Todolist')\r\n                    clickAutoFocus.current?.focus()\r\n                } else {\r\n                    setErrorDouble(null)\r\n                    setInputError(null)\r\n                    props.addItem(inputNewValue.trim(), true)\r\n                    setInputNewValue('')\r\n                }\r\n            }\r\n        } else {\r\n            setInputError('Enter the value')\r\n            clickAutoFocus.current?.focus()\r\n        }\r\n    }\r\n\r\n    const onChangeHandlerInputValue = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setInputError(null)\r\n        setErrorDouble(null)\r\n        setInputNewValue('')\r\n        setInputNewValue(e.currentTarget.value)\r\n    }\r\n    const onClickHandlerChangeNewStatus = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setNewStatusValue(e.currentTarget.checked)\r\n    }\r\n\r\n    const onBlurInputElement = () => {\r\n        setInputError(null)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                inputRef={clickAutoFocus}\r\n                id=\"outlined-basic\"\r\n                label={props.checkbox ? 'Task' : 'TodoList'}\r\n                variant=\"outlined\"\r\n                value={inputNewValue}\r\n                onChange={onChangeHandlerInputValue}\r\n                error={!!inputError || !!errorDouble}\r\n                helperText={inputError || errorDouble}\r\n                onBlur={onBlurInputElement}\r\n            />\r\n            {props.checkbox && <Checkbox\r\n                className={s.checkBoxForNewInput}\r\n                checked={newStatusValue}\r\n                onChange={onClickHandlerChangeNewStatus}\r\n                inputProps={{'aria-label': 'controlled'}}\r\n            />}\r\n            <Button\r\n                style={{\r\n                    transform: \"scale(0.75)\",\r\n                    maxWidth: '30px', maxHeight: '30px', minWidth: '30px', minHeight: '30px'\r\n                }}\r\n                onClick={addTask}\r\n                variant=\"contained\"\r\n                color=\"primary\">+</Button>\r\n        </div>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    onChangeHandlerForTaskTitle: (value: string) => void\r\n}\r\n\r\nfunction EditableSpan(props: EditableSpanType) {\r\n\r\n    let [activeModeForEdit, setActiveModeForEdit] = useState<boolean>(false);\r\n    let [title, setTitle] = useState('');\r\n\r\n    const activateModeHandler = () => {\r\n        setActiveModeForEdit(true)\r\n        setTitle(props.title)\r\n    }\r\n    const disableActivateModeHandler = () => {\r\n        setActiveModeForEdit(false)\r\n        props.onChangeHandlerForTaskTitle(title)\r\n    }\r\n    const onChangeHandlerValue = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        activeModeForEdit ?\r\n            <TextField\r\n                id=\"filled-basic\"\r\n                value={title}\r\n                onBlur={disableActivateModeHandler}\r\n                autoFocus\r\n                onChange={onChangeHandlerValue}\r\n            /> :\r\n            <span onDoubleClick={activateModeHandler}>{props.title}</span>\r\n    )\r\n}\r\n\r\nexport default EditableSpan","import React, {ChangeEvent} from \"react\";\r\nimport s from './TodoList.module.css'\r\nimport {FilterType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from '@material-ui/icons';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterType\r\n    removeTaskFromTasks: (idTd: string, id: string) => void\r\n    addNewTask: (id: string, newTitle: string, newStatus: boolean) => void\r\n    changeStatusTask: (idTd: string, id: string, status: boolean) => void\r\n    changeStatusTodoList: (id: string, fl: FilterType) => void\r\n    removeTodoLists: (idTd: string) => void\r\n    changeTitleForTask: (idTd: string, value: string, id?: string) => void\r\n}\r\n\r\nfunction TodoList(props: TodoListType) {\r\n\r\n    const addTask = (title: string, st: boolean) => {\r\n        props.addNewTask(props.id, title, st)\r\n    }\r\n\r\n    const onClickSetFilterToAll = () => {\r\n        props.changeStatusTodoList(props.id, 'all')\r\n    }\r\n    const onClickSetFilterToActive = () => {\r\n        props.changeStatusTodoList(props.id, 'active')\r\n    }\r\n    const onClickSetFilterToCompleted = () => {\r\n        props.changeStatusTodoList(props.id, 'completed')\r\n    }\r\n    const onClickHandlerRemoveTodoList = () => {\r\n        props.removeTodoLists(props.id)\r\n    }\r\n\r\n    const onChangeHandlerForTdTitle = (value: string) => {\r\n        props.changeTitleForTask(props.id, value)\r\n    }\r\n\r\n    return (\r\n        <div className={s.styleForTodolist}>\r\n            <h3>\r\n                <EditableSpan\r\n                    title={props.title}\r\n                    onChangeHandlerForTaskTitle={onChangeHandlerForTdTitle}\r\n                />\r\n                <IconButton aria-label=\"delete\" size=\"small\">\r\n                    <Delete\r\n                        className={s.marginToRemoveButton}\r\n                        fontSize=\"inherit\"\r\n                        onClick={onClickHandlerRemoveTodoList}\r\n                    />\r\n                </IconButton>\r\n            </h3>\r\n\r\n            <AddItemForm\r\n                tasksTitle={props.tasks.map(el => el.title)}\r\n                addItem={addTask}\r\n                checkbox\r\n            />\r\n\r\n            <ul>\r\n                {\r\n                    props.tasks.map(t => {\r\n\r\n                        const onClickRemoveTaskFromTodolist = () => {\r\n                            props.removeTaskFromTasks(props.id, t.id)\r\n                        }\r\n                        const onClickChangeStatusForTask = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            props.changeStatusTask(props.id, t.id, e.currentTarget.checked)\r\n                        }\r\n\r\n                        const onChangeHandlerForTaskTitle = (value: string) => {\r\n                            props.changeTitleForTask(props.id, value, t.id)\r\n                        }\r\n\r\n                        return (\r\n                            <li key={t.id} className={t.isDone ? s.completedTask : ''}>\r\n                                <Checkbox\r\n                                    style={{\r\n                                        transform: \"scale(0.75)\",\r\n                                    }}\r\n                                    checked={t.isDone}\r\n                                    onChange={onClickChangeStatusForTask}\r\n                                    inputProps={{'aria-label': 'controlled'}}\r\n                                />\r\n                                <EditableSpan\r\n                                    title={t.title}\r\n                                    onChangeHandlerForTaskTitle={onChangeHandlerForTaskTitle}\r\n                                />\r\n                                <IconButton aria-label=\"delete\" size=\"small\">\r\n                                    <Delete\r\n                                        className={s.marginToRemoveButton}\r\n                                        fontSize=\"inherit\"\r\n                                        onClick={onClickRemoveTaskFromTodolist}\r\n                                    />\r\n                                </IconButton>\r\n\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    style={{\r\n                        transform: \"scale(1)\",\r\n                        fontSize: '10px'\r\n                    }}\r\n                    variant={props.filter === 'all' ? 'contained' : 'text'}\r\n                    onClick={onClickSetFilterToAll}\r\n                >All\r\n                </Button>\r\n                <Button\r\n                    style={{\r\n                        transform: \"scale(1)\",\r\n                        fontSize: '10px',\r\n                    }}\r\n                    color={\"primary\"}\r\n                    variant={props.filter === 'active' ? 'contained' : 'text'}\r\n                    onClick={onClickSetFilterToActive}\r\n                >Active\r\n                </Button>\r\n                <Button\r\n                    style={{\r\n                        transform: \"scale(1)\",\r\n                        fontSize: '10px',\r\n                    }}\r\n                    color={\"secondary\"}\r\n                    variant={props.filter === 'completed' ? 'contained' : 'text'}\r\n                    onClick={onClickSetFilterToCompleted}\r\n                >Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {v1} from \"uuid\";\r\nimport TodoList, {TaskType} from \"./TodoList\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Container, Grid, IconButton, Toolbar, Typography} from \"@mui/material\";\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\n\r\n\r\n\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\nexport type TodolistsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    let td1 = v1()\r\n    let td2 = v1()\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistsType>>([\r\n        {id: td1, title: 'What to learn', filter: 'all'},\r\n        {id: td2, title: 'What to buy', filter: 'all'}\r\n    ]);\r\n\r\n    const addNewTodolist = (title: string) => {\r\n        let todolist: TodolistsType = {id: v1(), title: title, filter: 'all'}\r\n        setTodolists([todolist, ...todolists])\r\n        setTasks({...tasks, [todolist.id]: []})\r\n    }\r\n\r\n    const changeStatusTodoList = (id: string, fl: FilterType) => {\r\n        let tdFind = todolists.find(el => el.id === id)\r\n        if (tdFind) {\r\n            tdFind.filter = fl\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    const removeTodoLists = (idTd: string) => {\r\n        let findTd = todolists.filter(el => el.id !== idTd)\r\n        setTodolists([...findTd])\r\n        delete tasks[idTd]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [td1]: [{id: v1(), title: 'HTML', isDone: true},\r\n            {id: v1(), title: 'CSS', isDone: true},\r\n            {id: v1(), title: 'React', isDone: false}\r\n        ],\r\n        [td2]: [{id: v1(), title: 'Bread', isDone: true},\r\n            {id: v1(), title: 'Milk', isDone: true},\r\n            {id: v1(), title: 'Books', isDone: false}\r\n        ]\r\n    });\r\n\r\n    const addNewTask = (id: string, newTitle: string, newStatus: boolean) => {\r\n        let newTask = {id: v1(), title: newTitle, isDone: newStatus}\r\n        tasks[id] = [newTask, ...tasks[id]]\r\n        setTasks({...tasks})\r\n    }\r\n    const removeTaskFromTasks = (idTd: string, id: string) => {\r\n        tasks[idTd] = tasks[idTd].filter(el => el.id !== id)\r\n        setTasks({...tasks})\r\n    }\r\n    const changeStatusTask = (idTd: string, id: string, status: boolean) => {\r\n        let task = tasks[idTd].find(el => el.id === id)\r\n        if (task) {\r\n            task.isDone = status\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n    const changeTitleForTask = (idTd: string, value: string, id?: string) => {\r\n        if (id !== \"undefined\") {\r\n            let td = tasks[idTd].find(el => el.id === id)\r\n            if (td) {\r\n                td.title = value\r\n                setTasks({...tasks})\r\n            }\r\n        }\r\n        if (id === \"undefined\") {\r\n            let td = todolists.find(el => el.id === idTd)\r\n            if (td) {\r\n                td.title = value\r\n                setTasks({...tasks})\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Toolbar variant=\"dense\">\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" sx={{mr: 2}}>\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" color=\"inherit\" component=\"div\">\r\n                        TodoList\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '10px'}}\r\n                >\r\n                    <AddItemForm\r\n                        addItem={addNewTodolist}\r\n                        todolistsTitle={todolists.map(el => el.title)}\r\n                    />\r\n                </Grid>\r\n                <Grid container spacing={2}\r\n                      rowSpacing={1} columnSpacing={{xs: 1, sm: 2, md: 3}}\r\n                >\r\n                {\r\n                    todolists.map(t => {\r\n\r\n                        let filteredTasks = tasks[t.id]\r\n                        if (t.filter === 'active') {\r\n                            filteredTasks = filteredTasks.filter(el => !el.isDone)\r\n                        }\r\n                        if (t.filter === 'completed') {\r\n                            filteredTasks = filteredTasks.filter(el => el.isDone)\r\n                        }\r\n\r\n                        return (\r\n                            <Grid>\r\n                                <TodoList\r\n                                    key={t.id}\r\n                                    id={t.id}\r\n                                    title={t.title}\r\n                                    tasks={filteredTasks}\r\n                                    filter={t.filter}\r\n                                    removeTaskFromTasks={removeTaskFromTasks}\r\n                                    addNewTask={addNewTask}\r\n                                    changeStatusTask={changeStatusTask}\r\n                                    changeStatusTodoList={changeStatusTodoList}\r\n                                    removeTodoLists={removeTodoLists}\r\n                                    changeTitleForTask={changeTitleForTask}\r\n                                />\r\n                            </Grid>\r\n                        )\r\n                    })\r\n                }\r\n                    </Grid>\r\n                    </Container>\r\n                    </div>\r\n                    );\r\n                }\r\n\r\n                      export default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"styleForTodolist\":\"TodoList_styleForTodolist__3ssp-\",\"marginToRemoveButton\":\"TodoList_marginToRemoveButton__1Sv-Q\",\"checkBoxForNewInput\":\"TodoList_checkBoxForNewInput__TguB3\",\"colorForError\":\"TodoList_colorForError__3qM11\",\"borderColorForError\":\"TodoList_borderColorForError__K1E4I\",\"filterForTasks\":\"TodoList_filterForTasks__Id49I\",\"completedTask\":\"TodoList_completedTask__3TIIU\"};"],"sourceRoot":""}