{"version":3,"sources":["TodoList.module.css","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","TodoList","props","useState","inputNewValue","setInputNewValue","newStatusValue","setNewStatusValue","inputError","setInputError","errorDoubleTask","setErrorDoubleTask","className","s","styleForTodolist","title","marginToRemoveButton","onClick","removeTodoLists","id","borderColorForError","value","onChange","e","currentTarget","checkBoxForNewInput","type","checked","trim","tasks","find","el","addNewTask","colorForError","map","t","key","isDone","completedTask","changeStatusTask","removeTaskFromTasks","filter","filterForTasks","changeStatusTodoList","App","td1","v1","td2","todolists","setTodolists","setTasks","fl","tdFind","idTd","findTd","newTitle","newStatus","newTask","status","task","filteredTasks","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c5711552.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"styleForTodolist\":\"TodoList_styleForTodolist__3ssp-\",\"marginToRemoveButton\":\"TodoList_marginToRemoveButton__1Sv-Q\",\"checkBoxForNewInput\":\"TodoList_checkBoxForNewInput__TguB3\",\"colorForError\":\"TodoList_colorForError__3qM11\",\"borderColorForError\":\"TodoList_borderColorForError__K1E4I\",\"filterForTasks\":\"TodoList_filterForTasks__Id49I\",\"completedTask\":\"TodoList_completedTask__3TIIU\"};","import React, {useState} from \"react\";\r\nimport s from './TodoList.module.css'\r\nimport {FilterType} from \"./App\";\r\n\r\ntype TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterType\r\n    removeTaskFromTasks: (idTd: string ,id: string) => void\r\n    addNewTask: (id: string, newTitle: string, newStatus: boolean) => void\r\n    changeStatusTask: (idTd: string, id: string, status: boolean)  => void\r\n    changeStatusTodoList: (id: string, fl: FilterType) => void\r\n    removeTodoLists: (idTd: string) => void\r\n}\r\n\r\nfunction TodoList(props: TodoListType) {\r\n\r\n    let [inputNewValue, setInputNewValue] = useState('');\r\n    let [newStatusValue, setNewStatusValue] = useState<boolean>(false);\r\n    let [inputError, setInputError] = useState<string | null>('');\r\n    let [errorDoubleTask, setErrorDoubleTask] = useState<string | null>('');\r\n\r\n    const addTask = () => {\r\n        if (inputNewValue.trim()) {\r\n            let doubleTask = props.tasks.find(el => el.title === inputNewValue)\r\n            if (doubleTask) {\r\n                setErrorDoubleTask('Already have this task')\r\n            } else {\r\n                props.addNewTask(props.id, inputNewValue, newStatusValue)\r\n                setInputNewValue('')\r\n                setNewStatusValue(false)\r\n                setErrorDoubleTask(null)\r\n            }\r\n        } else {\r\n            setInputError('Enter the value')\r\n        }\r\n    }\r\n    const onClickSetFilterToAll = () => {\r\n        props.changeStatusTodoList(props.id,'all')\r\n    }\r\n    const onClickSetFilterToActive = () => {\r\n        props.changeStatusTodoList(props.id,'active')\r\n    }\r\n    const onClickSetFilterToCompleted = () => {\r\n        props.changeStatusTodoList(props.id,'completed')\r\n    }\r\n    const onChangeHandlerInputValue = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setInputError(null)\r\n        setErrorDoubleTask(null)\r\n        setInputNewValue(e.currentTarget.value)\r\n    }\r\n    const onClickHandlerChangeNewStatus = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setNewStatusValue(e.currentTarget.checked)\r\n    }\r\n    const onClickHandlerRemoveTodoList = () => {\r\n        props.removeTodoLists(props.id)\r\n    }\r\n\r\n    return (\r\n        <div className={s.styleForTodolist}>\r\n            <h3>{props.title}\r\n            <button className={s.marginToRemoveButton} onClick={onClickHandlerRemoveTodoList}>x</button>\r\n            </h3>\r\n            <div>\r\n                <input className={inputError || errorDoubleTask ? s.borderColorForError : ''} value={inputNewValue} onChange={onChangeHandlerInputValue}/>\r\n                <input className={s.checkBoxForNewInput} type=\"checkbox\" checked={newStatusValue}\r\n                       onChange={onClickHandlerChangeNewStatus}/>\r\n                <button onClick={addTask}>+</button>\r\n                {inputError && <div className={s.colorForError}>{inputError}</div>}\r\n                {errorDoubleTask && <div className={s.colorForError}>{errorDoubleTask}</div>}\r\n            </div>\r\n            <ul>\r\n                {\r\n                    props.tasks.map(t => {\r\n\r\n                        const onClickRemoveTaskFromTodolist = () => {\r\n                            props.removeTaskFromTasks(props.id, t.id)\r\n                        }\r\n                        const onClickChangeStatusForTask = (e: React.MouseEvent<HTMLInputElement>) => {\r\n                            props.changeStatusTask(props.id, t.id, e.currentTarget.checked)\r\n                        }\r\n\r\n\r\n                        return (\r\n                            <li key={t.id} className={t.isDone ? s.completedTask : ''}>\r\n                                <input type=\"checkbox\" checked={t.isDone} onClick={onClickChangeStatusForTask}/>\r\n                                <span>{t.title}</span>\r\n                                <button className={s.marginToRemoveButton}\r\n                                        onClick={onClickRemoveTaskFromTodolist}>x\r\n                                </button>\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <button className={props.filter=== 'all' ? s.filterForTasks : ''} onClick={onClickSetFilterToAll}>All</button>\r\n                <button className={props.filter=== 'active' ? s.filterForTasks : ''} onClick={onClickSetFilterToActive}>Active</button>\r\n                <button className={props.filter=== 'completed' ? s.filterForTasks : ''} onClick={onClickSetFilterToCompleted}>Completed</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {v1} from \"uuid\";\r\nimport TodoList from \"./TodoList\";\r\n\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\ntype TodolistsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n}\r\n\r\nfunction App() {\r\n\r\n    let td1 = v1()\r\n    let td2 = v1()\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistsType>>([\r\n        {id: td1, title: 'What to learn', filter: 'all'},\r\n        {id: td2, title: 'What to buy', filter: 'all'}\r\n    ]);\r\n\r\n    let [tasks, setTasks] = useState({\r\n        [td1]: [{id: v1(), title: 'HTML', isDone: true},\r\n            {id: v1(), title: 'CSS', isDone: true},\r\n            {id: v1(), title: 'React', isDone: false}\r\n        ],\r\n        [td2]: [{id: v1(), title: 'Bread', isDone: true},\r\n            {id: v1(), title: 'Milk', isDone: true},\r\n            {id: v1(), title: 'Books', isDone: false}\r\n        ]\r\n    });\r\n\r\n    const changeStatusTodoList = (id: string, fl: FilterType) => {\r\n        let tdFind = todolists.find(el => el.id === id)\r\n        if (tdFind) {\r\n            tdFind.filter = fl\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    const removeTodoLists = (idTd: string) => {\r\n        let findTd = todolists.filter(el => el.id !== idTd)\r\n        setTodolists([...findTd])\r\n        delete tasks[idTd]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    const addNewTask = (id: string, newTitle: string, newStatus: boolean) => {\r\n        let newTask = {id: v1(), title: newTitle, isDone: newStatus}\r\n        tasks[id] = [newTask, ...tasks[id]]\r\n        setTasks({...tasks})\r\n    }\r\n    const removeTaskFromTasks = (idTd: string ,id: string) => {\r\n        tasks[idTd] = tasks[idTd].filter(el => el.id !== id)\r\n        setTasks({...tasks})\r\n    }\r\n    const changeStatusTask = (idTd: string, id: string, status: boolean) => {\r\n        let task = tasks[idTd].find(el => el.id === id)\r\n        if (task) {\r\n            task.isDone = status\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                todolists.map(t => {\r\n\r\n                    let filteredTasks = tasks[t.id]\r\n                    if (t.filter === 'active') {\r\n                        filteredTasks = filteredTasks.filter(el => !el.isDone)\r\n                    }\r\n                    if (t.filter === 'completed') {\r\n                        filteredTasks = filteredTasks.filter(el => el.isDone)\r\n                    }\r\n\r\n                    return (\r\n                        <TodoList\r\n                            id={t.id}\r\n                            title={t.title}\r\n                            tasks={filteredTasks}\r\n                            filter={t.filter}\r\n                            removeTaskFromTasks={removeTaskFromTasks}\r\n                            addNewTask={addNewTask}\r\n                            changeStatusTask={changeStatusTask}\r\n                            changeStatusTodoList={changeStatusTodoList}\r\n                            removeTodoLists={removeTodoLists}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n</div>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}