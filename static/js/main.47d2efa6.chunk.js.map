{"version":3,"sources":["TodoList.module.css","AddItemForm.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","AddItemForm","props","useState","inputNewValue","setInputNewValue","newStatusValue","setNewStatusValue","inputError","setInputError","errorDouble","setErrorDouble","className","s","borderColorForError","value","onChange","e","currentTarget","checkbox","checkBoxForNewInput","type","checked","onClick","trim","tasksTitle","find","el","addItem","todolistsTitle","colorForError","TodoList","styleForTodolist","title","marginToRemoveButton","removeTodoLists","id","tasks","map","st","addNewTask","t","key","isDone","completedTask","changeStatusTask","removeTaskFromTasks","filter","filterForTasks","changeStatusTodoList","App","td1","v1","td2","todolists","setTodolists","setTasks","fl","tdFind","idTd","findTd","newTitle","newStatus","newTask","status","task","todolist","filteredTasks","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.47d2efa6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"styleForTodolist\":\"TodoList_styleForTodolist__3ssp-\",\"marginToRemoveButton\":\"TodoList_marginToRemoveButton__1Sv-Q\",\"checkBoxForNewInput\":\"TodoList_checkBoxForNewInput__TguB3\",\"colorForError\":\"TodoList_colorForError__3qM11\",\"borderColorForError\":\"TodoList_borderColorForError__K1E4I\",\"filterForTasks\":\"TodoList_filterForTasks__Id49I\",\"completedTask\":\"TodoList_completedTask__3TIIU\"};","import React, {useState} from \"react\";\r\nimport s from \"./TodoList.module.css\";\r\n\r\ntype AddItemFormType = {\r\n    tasksTitle?: Array<string>\r\n    todolistsTitle?: Array<string>\r\n    checkbox?: boolean\r\n    addItem: (title: string, st: boolean) => void\r\n}\r\n\r\n\r\nexport function AddItemForm(props: AddItemFormType) {\r\ndebugger\r\n    let [inputNewValue, setInputNewValue] = useState<string>('');\r\n    let [newStatusValue, setNewStatusValue] = useState<boolean>(false);\r\n    let [inputError, setInputError] = useState<string | null>(null);\r\n    let [errorDouble, setErrorDouble] = useState<string | null>(null);\r\n\r\n    const addTask = () => {\r\n        if (inputNewValue.trim() !== '') {\r\n            if (props.checkbox) {\r\n                let doubleTask = props.tasksTitle?.find(el => el === inputNewValue)\r\n                if (doubleTask) {\r\n                    setErrorDouble('Already have this task')\r\n                } else {\r\n                    props.addItem(inputNewValue.trim(), newStatusValue)\r\n                    setInputNewValue('')\r\n                    setNewStatusValue(false)\r\n                    setErrorDouble(null)\r\n                    setInputError(null)\r\n                }\r\n            }\r\n            if (!props.checkbox) {\r\n                let doubleTd = props.todolistsTitle?.find(el => el === inputNewValue)\r\n                    if (doubleTd) {\r\n                        setErrorDouble('Already have this Todolist')\r\n                    } else {\r\n                        props.addItem(inputNewValue.trim(), newStatusValue)\r\n                        setInputNewValue('')\r\n                        setErrorDouble(null)\r\n                        setInputError(null)\r\n                }\r\n            }\r\n        } else {\r\n            setInputError('Enter the value')\r\n        }\r\n    }\r\n\r\n    const onChangeHandlerInputValue = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setInputError(null)\r\n        setErrorDouble(null)\r\n        setInputNewValue('')\r\n        setInputNewValue(e.currentTarget.value)\r\n    }\r\n    const onClickHandlerChangeNewStatus = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setNewStatusValue(e.currentTarget.checked)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input className={inputError || errorDouble ? s.borderColorForError : ''} value={inputNewValue}\r\n                   onChange={onChangeHandlerInputValue}/>\r\n            {props.checkbox && <input className={s.checkBoxForNewInput} type=\"checkbox\" checked={newStatusValue}\r\n                                      onChange={onClickHandlerChangeNewStatus}/>}\r\n            <button onClick={addTask}>+</button>\r\n            {inputError && <div className={s.colorForError}>{inputError}</div>}\r\n            {errorDouble && <div className={s.colorForError}>{errorDouble}</div>}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './TodoList.module.css'\r\nimport {FilterType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterType\r\n    removeTaskFromTasks: (idTd: string, id: string) => void\r\n    addNewTask: (id: string, newTitle: string, newStatus: boolean) => void\r\n    changeStatusTask: (idTd: string, id: string, status: boolean) => void\r\n    changeStatusTodoList: (id: string, fl: FilterType) => void\r\n    removeTodoLists: (idTd: string) => void\r\n}\r\n\r\nfunction TodoList(props: TodoListType) {\r\n\r\n    const addTask = (title: string, st: boolean) => {\r\n        props.addNewTask(props.id, title, st)\r\n    }\r\n\r\n    const onClickSetFilterToAll = () => {\r\n        props.changeStatusTodoList(props.id, 'all')\r\n    }\r\n    const onClickSetFilterToActive = () => {\r\n        props.changeStatusTodoList(props.id, 'active')\r\n    }\r\n    const onClickSetFilterToCompleted = () => {\r\n        props.changeStatusTodoList(props.id, 'completed')\r\n    }\r\n    const onClickHandlerRemoveTodoList = () => {\r\n        props.removeTodoLists(props.id)\r\n    }\r\n\r\n    return (\r\n        <div className={s.styleForTodolist}>\r\n            <h3>{props.title}\r\n                <button className={s.marginToRemoveButton} onClick={onClickHandlerRemoveTodoList}>x</button>\r\n            </h3>\r\n\r\n            <AddItemForm\r\n                tasksTitle={props.tasks.map(el => el.title)}\r\n                addItem={addTask}\r\n                checkbox\r\n            />\r\n\r\n            <ul>\r\n                {\r\n                    props.tasks.map(t => {\r\n\r\n                        const onClickRemoveTaskFromTodolist = () => {\r\n                            props.removeTaskFromTasks(props.id, t.id)\r\n                        }\r\n                        const onClickChangeStatusForTask = (e: React.MouseEvent<HTMLInputElement>) => {\r\n                            props.changeStatusTask(props.id, t.id, e.currentTarget.checked)\r\n                        }\r\n\r\n\r\n                        return (\r\n                            <li key={t.id} className={t.isDone ? s.completedTask : ''}>\r\n                                <input type=\"checkbox\" checked={t.isDone} onClick={onClickChangeStatusForTask}/>\r\n                                <span>{t.title}</span>\r\n                                <button className={s.marginToRemoveButton}\r\n                                        onClick={onClickRemoveTaskFromTodolist}>x\r\n                                </button>\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <button className={props.filter === 'all' ? s.filterForTasks : ''} onClick={onClickSetFilterToAll}>All\r\n                </button>\r\n                <button className={props.filter === 'active' ? s.filterForTasks : ''}\r\n                        onClick={onClickSetFilterToActive}>Active\r\n                </button>\r\n                <button className={props.filter === 'completed' ? s.filterForTasks : ''}\r\n                        onClick={onClickSetFilterToCompleted}>Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {v1} from \"uuid\";\r\nimport TodoList, {TaskType} from \"./TodoList\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\n\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\ntype TodolistsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    let td1 = v1()\r\n    let td2 = v1()\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistsType>>([\r\n        {id: td1, title: 'What to learn', filter: 'all'},\r\n        {id: td2, title: 'What to buy', filter: 'all'}\r\n    ]);\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [td1]: [{id: v1(), title: 'HTML', isDone: true},\r\n            {id: v1(), title: 'CSS', isDone: true},\r\n            {id: v1(), title: 'React', isDone: false}\r\n        ],\r\n        [td2]: [{id: v1(), title: 'Bread', isDone: true},\r\n            {id: v1(), title: 'Milk', isDone: true},\r\n            {id: v1(), title: 'Books', isDone: false}\r\n        ]\r\n    });\r\n\r\n    const changeStatusTodoList = (id: string, fl: FilterType) => {\r\n        let tdFind = todolists.find(el => el.id === id)\r\n        if (tdFind) {\r\n            tdFind.filter = fl\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    const removeTodoLists = (idTd: string) => {\r\n        let findTd = todolists.filter(el => el.id !== idTd)\r\n        setTodolists([...findTd])\r\n        delete tasks[idTd]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    const addNewTask = (id: string, newTitle: string, newStatus: boolean) => {\r\n        let newTask = {id: v1(), title: newTitle, isDone: newStatus}\r\n        tasks[id] = [newTask, ...tasks[id]]\r\n        setTasks({...tasks})\r\n    }\r\n    const removeTaskFromTasks = (idTd: string, id: string) => {\r\n        tasks[idTd] = tasks[idTd].filter(el => el.id !== id)\r\n        setTasks({...tasks})\r\n    }\r\n    const changeStatusTask = (idTd: string, id: string, status: boolean) => {\r\n        let task = tasks[idTd].find(el => el.id === id)\r\n        if (task) {\r\n            task.isDone = status\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    const addNewTodolist = (title: string) => {\r\n      let todolist: TodolistsType = {id: v1(), title: title, filter: 'all'}\r\n        setTodolists([todolist, ...todolists])\r\n        setTasks({...tasks, [todolist.id]: []})\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            <div className={'styleForTodolist'}>\r\n                <AddItemForm\r\n                    addItem={addNewTodolist}\r\n                    todolistsTitle={todolists.map(el => el.title)}\r\n                />\r\n            </div>\r\n            {\r\n                todolists.map(t => {\r\n\r\n                    let filteredTasks = tasks[t.id]\r\n                    if (t.filter === 'active') {\r\n                        filteredTasks = filteredTasks.filter(el => !el.isDone)\r\n                    }\r\n                    if (t.filter === 'completed') {\r\n                        filteredTasks = filteredTasks.filter(el => el.isDone)\r\n                    }\r\n\r\n                    return (\r\n                        <TodoList\r\n                            id={t.id}\r\n                            title={t.title}\r\n                            tasks={filteredTasks}\r\n                            filter={t.filter}\r\n                            removeTaskFromTasks={removeTaskFromTasks}\r\n                            addNewTask={addNewTask}\r\n                            changeStatusTask={changeStatusTask}\r\n                            changeStatusTodoList={changeStatusTodoList}\r\n                            removeTodoLists={removeTodoLists}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}