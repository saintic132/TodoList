{"version":3,"sources":["serviceWorker.ts","state/task-reducer.ts","state/todolists-reducer.ts","state/store.tsx","AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","AppWithRedux.tsx","index.tsx","TodoList.module.css"],"names":["Boolean","window","location","hostname","match","td1","v1","td2","initialTaskState","id","title","isDone","initialTodolistState","filter","ChangeTodolistFilterAC","todolistId","type","rootReducer","combineReducers","tasks","state","action","tdId","el","taskId","newTask","status","map","newTasks","todolists","findTodoList","find","findTask","store","createStore","AddItemForm","props","useState","inputNewValue","setInputNewValue","newStatusValue","setNewStatusValue","inputError","setInputError","errorDouble","setErrorDouble","clickAutoFocus","useRef","TextField","inputRef","label","checkbox","variant","value","onChange","e","currentTarget","error","helperText","onBlur","Checkbox","className","s","checkBoxForNewInput","checked","inputProps","Button","style","transform","maxWidth","maxHeight","minWidth","minHeight","onClick","trim","tasksTitle","current","focus","addItem","todolistsTitle","color","EditableSpan","activeModeForEdit","setActiveModeForEdit","setTitle","onChangeHandlerForTaskTitle","onKeyPress","key","autoFocus","onDoubleClick","TodoList","useSelector","td","dispatch","useDispatch","filteredTasks","styleForTodolist","ChangeTodolistTitleAC","IconButton","aria-label","size","Delete","marginToRemoveButton","fontSize","RemoveTodolistAC","st","t","completedTask","AppWithRedux","AppBar","position","Toolbar","edge","sx","mr","Typography","component","Container","fixed","Grid","container","padding","AddTodolistAC","spacing","rowSpacing","columnSpacing","xs","sm","md","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","module","exports"],"mappings":"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","file":"static/js/main.5369f148.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {StartTaskType} from \"./task-reducer.test\";\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from \"./todolists-reducer\";\r\nimport {v1} from \"uuid\";\r\nimport {TaskType} from \"../TodoList\";\r\n\r\ntype FirstActionType = ReturnType<typeof removeTaskFromTodolistAC>\r\ntype SecondActionType = ReturnType<typeof addTaskAC>\r\ntype ThirdActionType = ReturnType<typeof changeTaskStatusAC>\r\ntype FourActionType = ReturnType<typeof changeTitleAC>\r\n\r\nexport type ActionsTasksType =\r\n    FirstActionType\r\n    | SecondActionType\r\n    | ThirdActionType\r\n    | FourActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\nexport let td1 = v1()\r\nexport let td2 = v1()\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nlet initialTaskState: TasksStateType = {\r\n    [td1]: [{id: v1(), title: 'HTML', isDone: true},\r\n        {id: v1(), title: 'CSS', isDone: true},\r\n        {id: v1(), title: 'React', isDone: false}\r\n    ],\r\n    [td2]: [{id: v1(), title: 'Bread', isDone: true},\r\n        {id: v1(), title: 'Milk', isDone: true},\r\n        {id: v1(), title: 'Books', isDone: false}\r\n    ]\r\n};\r\n\r\nexport const taskReducer = (state: StartTaskType = initialTaskState, action: ActionsTasksType): StartTaskType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK-FROM-TODOLIST':\r\n            return {\r\n                ...state,\r\n                [action.tdId]: state[action.tdId].filter(el => el.id !== action.taskId)\r\n            };\r\n        case 'ADD-NEW-TASK-FOR-TODOLIST':\r\n            return {\r\n                ...state,\r\n                [action.tdId]: [{id: '0', title: action.newTask, isDone: action.status}, ...state[action.tdId]]\r\n            }\r\n        case 'CHANGE-TASK-STATUS':\r\n            return {\r\n                ...state,\r\n                [action.tdId]:\r\n                    state[action.tdId].map(el => el.id === action.taskId\r\n                        ? {...el, isDone: action.status}\r\n                        : el\r\n                    )\r\n            }\r\n        case 'CHANGE-TASK-TITLE':\r\n            return {\r\n                ...state,\r\n                [action.tdId]:\r\n                    state[action.tdId].map(el => el.id === action.taskId\r\n                        ? {...el, title: action.title}\r\n                        : el\r\n                    )\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {\r\n                ...state,\r\n                [action.id]: []\r\n            }\r\n        case 'REMOVE-TODOLIST':\r\n            let newTasks = {...state}\r\n            delete newTasks[action.id]\r\n            return newTasks\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskFromTodolistAC = (taskId: string, tdId: string) => ({\r\n    type: 'REMOVE-TASK-FROM-TODOLIST',\r\n    taskId,\r\n    tdId\r\n} as const)\r\n\r\nexport const addTaskAC = (newTask: string, tdId: string, status: boolean) => ({\r\n    type: 'ADD-NEW-TASK-FOR-TODOLIST',\r\n    newTask,\r\n    tdId,\r\n    status\r\n} as const)\r\n\r\nexport const changeTaskStatusAC = (taskId: string, status: boolean, tdId: string) => ({\r\n    type: 'CHANGE-TASK-STATUS',\r\n    taskId,\r\n    status,\r\n    tdId\r\n} as const)\r\nexport const changeTitleAC = (taskId: string, title: string, tdId: string) => ({\r\n    type: 'CHANGE-TASK-TITLE',\r\n    taskId,\r\n    title,\r\n    tdId\r\n} as const)\r\n\r\n// export const addTaskAC = (newTask: string, tdId: string) => ({type: 'ADD-NEW-TASK-FOR-TODOLIST',newTask,tdId} as const)\r\n// export const addTaskAC = (newTask: string, tdId: string) => ({type: 'ADD-NEW-TASK-FOR-TODOLIST',newTask,tdId} as const)\r\n","import {v1} from \"uuid\";\r\nimport {td1, td2} from \"./task-reducer\";\r\nimport {FilterType} from \"../AppWithRedux\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\n\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    id: string\r\n}\r\n\r\ntype ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\n\r\ntype ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterType\r\n}\r\n\r\nexport type ActionsTodolistsType = RemoveTodolistActionType | AddTodolistActionType | ChangeTodolistTitleActionType | ChangeTodolistFilterActionType\r\n\r\nexport type TodolistsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n}\r\nconst initialTodolistState: TodolistsType[] = [\r\n    {id: td1, title: 'What to learn', filter: 'all'},\r\n    {id: td2, title: 'What to buy', filter: 'all'}\r\n]\r\n\r\nexport const todolistsReducer = (state: Array<TodolistsType> = initialTodolistState, action: ActionsTodolistsType): Array<TodolistsType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(el => el.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{id: action.id, title: action.title, filter: \"all\"}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            let findTodoList = state.find(el => el.id === action.id)\r\n            if (findTodoList) {\r\n                findTodoList.title = action.title\r\n            }\r\n            return [...state]\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            let findTask = state.find(el => el.id === action.id)\r\n            if (findTask) {\r\n                findTask.filter = action.filter\r\n            }\r\n            return [...state]\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const RemoveTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return { type: 'REMOVE-TODOLIST', id: todolistId} as const\r\n}\r\n\r\nexport const AddTodolistAC = (title: string): AddTodolistActionType => {\r\n    return { type: 'ADD-TODOLIST', title: title, id: v1()} as const\r\n}\r\n\r\nexport const ChangeTodolistTitleAC = (todolistId: string, title: string): ChangeTodolistTitleActionType => {\r\n    return { type: 'CHANGE-TODOLIST-TITLE', id: todolistId, title: title} as const\r\n}\r\n\r\nexport const ChangeTodolistFilterAC = (todolistId: string, filter: FilterType): ChangeTodolistFilterActionType => {\r\n    return { type: 'CHANGE-TODOLIST-FILTER', id: todolistId, filter: filter} as const\r\n}","import {combineReducers, createStore, Store} from \"redux\";\r\nimport {ActionsTasksType, taskReducer} from \"./task-reducer\";\r\nimport {ActionsTodolistsType, todolistsReducer} from \"./todolists-reducer\";\r\n\r\nexport type ActionsRootType = ActionsTasksType | ActionsTodolistsType\r\nconst rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    todolists: todolistsReducer\r\n})\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\nexport const store: Store<AppRootStateType, ActionsRootType> = createStore(rootReducer)","import React, {useRef, useState} from \"react\";\r\nimport s from \"./TodoList.module.css\";\r\nimport {Button, Checkbox, TextField} from \"@material-ui/core\";\r\n\r\ntype AddItemFormType = {\r\n    tasksTitle?: Array<string>\r\n    todolistsTitle?: Array<string>\r\n    checkbox?: boolean\r\n    addItem: (title: string, st: boolean) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormType) {\r\n    let [inputNewValue, setInputNewValue] = useState<string>('');\r\n    let [newStatusValue, setNewStatusValue] = useState<boolean>(false);\r\n    let [inputError, setInputError] = useState<string | null>(null);\r\n    let [errorDouble, setErrorDouble] = useState<string | null>(null);\r\n\r\n    let clickAutoFocus = useRef<any>(null)\r\n\r\n    const addTask = () => {\r\n        if (inputNewValue.trim() !== '') {\r\n            if (props.checkbox) {\r\n                let doubleTask = props.tasksTitle?.find(el => el === inputNewValue)\r\n                if (doubleTask) {\r\n                    setErrorDouble('Already have this task')\r\n                    clickAutoFocus.current?.focus()\r\n                } else {\r\n                    props.addItem(inputNewValue.trim(), newStatusValue)\r\n                    setInputNewValue('')\r\n                    setNewStatusValue(false)\r\n                    setErrorDouble(null)\r\n                    setInputError(null)\r\n                }\r\n            }\r\n            if (!props.checkbox) {\r\n                let doubleTd = props.todolistsTitle?.find(el => el === inputNewValue)\r\n                if (doubleTd) {\r\n                    setErrorDouble('Already have this Todolist')\r\n                    clickAutoFocus.current?.focus()\r\n                } else {\r\n                    setErrorDouble(null)\r\n                    setInputError(null)\r\n                    props.addItem(inputNewValue.trim(), true)\r\n                    setInputNewValue('')\r\n                }\r\n            }\r\n        } else {\r\n            setInputError('Enter the value')\r\n            clickAutoFocus.current?.focus()\r\n        }\r\n    }\r\n\r\n    const onChangeHandlerInputValue = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setInputError(null)\r\n        setErrorDouble(null)\r\n        setInputNewValue('')\r\n        setInputNewValue(e.currentTarget.value)\r\n    }\r\n    const onClickHandlerChangeNewStatus = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setNewStatusValue(e.currentTarget.checked)\r\n    }\r\n\r\n    const onBlurInputElement = () => {\r\n        setInputError(null)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                inputRef={clickAutoFocus}\r\n                id=\"outlined-basic\"\r\n                label={props.checkbox ? 'Task' : 'TodoList'}\r\n                variant=\"outlined\"\r\n                value={inputNewValue}\r\n                onChange={onChangeHandlerInputValue}\r\n                error={!!inputError || !!errorDouble}\r\n                helperText={inputError || errorDouble}\r\n                onBlur={onBlurInputElement}\r\n            />\r\n            {props.checkbox && <Checkbox\r\n                className={s.checkBoxForNewInput}\r\n                checked={newStatusValue}\r\n                onChange={onClickHandlerChangeNewStatus}\r\n                inputProps={{'aria-label': 'controlled'}}\r\n            />}\r\n            <Button\r\n                style={{\r\n                    transform: \"scale(0.75)\",\r\n                    maxWidth: '30px', maxHeight: '30px', minWidth: '30px', minHeight: '30px'\r\n                }}\r\n                onClick={addTask}\r\n                variant=\"contained\"\r\n                color=\"primary\">+</Button>\r\n        </div>\r\n    )\r\n}","import React, {useState, KeyboardEvent} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    onChangeHandlerForTaskTitle: (value: string) => void\r\n}\r\n\r\nfunction EditableSpan(props: EditableSpanType) {\r\n\r\n    let [activeModeForEdit, setActiveModeForEdit] = useState<boolean>(false);\r\n    let [title, setTitle] = useState('');\r\n\r\n    const activateModeHandler = () => {\r\n        setActiveModeForEdit(true)\r\n        setTitle(props.title)\r\n    }\r\n    const disableActivateModeHandler = () => {\r\n        setActiveModeForEdit(false)\r\n        props.onChangeHandlerForTaskTitle(title)\r\n    }\r\n    const onChangeHandlerValueByKeyPress = (e: KeyboardEvent<HTMLDivElement>) => {\r\n        if (e.key === 'Enter') {\r\n            setActiveModeForEdit(false)\r\n            props.onChangeHandlerForTaskTitle(title)\r\n        }\r\n    }\r\n    const onChangeHandlerValue = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        activeModeForEdit ?\r\n            <TextField\r\n                id=\"filled-basic\"\r\n                value={title}\r\n                onBlur={disableActivateModeHandler}\r\n                onKeyPress={onChangeHandlerValueByKeyPress}\r\n                autoFocus\r\n                onChange={onChangeHandlerValue}\r\n            /> :\r\n            <span onDoubleClick={activateModeHandler}>{props.title}</span>\r\n    )\r\n}\r\n\r\nexport default EditableSpan","import React, {ChangeEvent} from \"react\";\r\nimport s from './TodoList.module.css'\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from '@material-ui/icons';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {ActionsRootType, AppRootStateType} from \"./state/store\";\r\nimport {\r\n    ChangeTodolistFilterAC,\r\n    ChangeTodolistTitleAC,\r\n    RemoveTodolistAC,\r\n    TodolistsType\r\n} from \"./state/todolists-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTitleAC, removeTaskFromTodolistAC} from \"./state/task-reducer\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype TodoListType = {\r\n    id: string\r\n}\r\n\r\nfunction TodoList(props: TodoListType) {\r\n\r\n    const tasks = useSelector<AppRootStateType, TaskType[]>(state => state.tasks[props.id])\r\n    const todolists = useSelector<AppRootStateType, TodolistsType>(state => state.todolists.filter(td => td.id === props.id)[0])\r\n\r\n    const dispatch = useDispatch<Dispatch<ActionsRootType>>()\r\n\r\n    const todolistId = todolists.id\r\n\r\n    let filteredTasks = tasks\r\n    if (todolists.filter === 'active') {\r\n        filteredTasks = filteredTasks.filter(el => !el.isDone)\r\n    }\r\n    if (todolists.filter === 'completed') {\r\n        filteredTasks = filteredTasks.filter(el => el.isDone)\r\n    }\r\n\r\n    const addTask = (title: string, st: boolean) => {\r\n        dispatch(addTaskAC(title, todolistId, st))\r\n    }\r\n\r\n    const onClickSetFilterToAll = () => {\r\n        dispatch(ChangeTodolistFilterAC(todolistId, 'all'))\r\n    }\r\n    const onClickSetFilterToActive = () => {\r\n        dispatch(ChangeTodolistFilterAC(todolistId, 'active'))\r\n    }\r\n    const onClickSetFilterToCompleted = () => {\r\n        dispatch(ChangeTodolistFilterAC(todolistId, 'completed'))\r\n    }\r\n    const onClickHandlerRemoveTodoList = () => {\r\n        dispatch(RemoveTodolistAC(todolistId))\r\n    }\r\n    const onChangeHandlerForTdTitle = (value: string) => {\r\n        dispatch(ChangeTodolistTitleAC(todolistId, value))\r\n    }\r\n\r\n    return (\r\n        <div className={s.styleForTodolist}>\r\n            <h3>\r\n                <EditableSpan\r\n                    title={todolists.title}\r\n                    onChangeHandlerForTaskTitle={onChangeHandlerForTdTitle}\r\n                />\r\n                <IconButton aria-label=\"delete\" size=\"small\">\r\n                    <Delete\r\n                        className={s.marginToRemoveButton}\r\n                        fontSize=\"inherit\"\r\n                        onClick={onClickHandlerRemoveTodoList}\r\n                    />\r\n                </IconButton>\r\n            </h3>\r\n\r\n            <AddItemForm\r\n                tasksTitle={tasks.map(el => el.title)}\r\n                addItem={addTask}\r\n                checkbox\r\n            />\r\n\r\n            <ul>\r\n                {\r\n                    filteredTasks.map(t => {\r\n\r\n                        const onClickRemoveTaskFromTodolist = () => {\r\n                            dispatch(removeTaskFromTodolistAC(t.id, todolistId))\r\n                        }\r\n                        const onClickChangeStatusForTask = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            dispatch(changeTaskStatusAC(t.id, e.currentTarget.checked, todolistId))\r\n                        }\r\n\r\n                        const onChangeHandlerForTaskTitle = (value: string) => {\r\n                            dispatch(changeTitleAC(t.id, value, todolistId))\r\n                        }\r\n\r\n                        return (\r\n                            <li\r\n                                key={t.id}\r\n                                className={t.isDone ? s.completedTask : ''}>\r\n                                <Checkbox\r\n                                    style={{\r\n                                        transform: \"scale(0.75)\",\r\n                                    }}\r\n                                    checked={t.isDone}\r\n                                    onChange={onClickChangeStatusForTask}\r\n                                    inputProps={{'aria-label': 'controlled'}}\r\n                                />\r\n                                <EditableSpan\r\n                                    title={t.title}\r\n                                    onChangeHandlerForTaskTitle={onChangeHandlerForTaskTitle}\r\n                                />\r\n                                <IconButton aria-label=\"delete\" size=\"small\">\r\n                                    <Delete\r\n                                        className={s.marginToRemoveButton}\r\n                                        fontSize=\"inherit\"\r\n                                        onClick={onClickRemoveTaskFromTodolist}\r\n                                    />\r\n                                </IconButton>\r\n\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    style={{\r\n                        transform: \"scale(1)\",\r\n                        fontSize: '10px'\r\n                    }}\r\n                    variant={todolists.filter === 'all' ? 'contained' : 'text'}\r\n                    onClick={onClickSetFilterToAll}\r\n                >All\r\n                </Button>\r\n                <Button\r\n                    style={{\r\n                        transform: \"scale(1)\",\r\n                        fontSize: '10px',\r\n                    }}\r\n                    color={\"primary\"}\r\n                    variant={todolists.filter === 'active' ? 'contained' : 'text'}\r\n                    onClick={onClickSetFilterToActive}\r\n                >Active\r\n                </Button>\r\n                <Button\r\n                    style={{\r\n                        transform: \"scale(1)\",\r\n                        fontSize: '10px',\r\n                    }}\r\n                    color={\"secondary\"}\r\n                    variant={todolists.filter === 'completed' ? 'contained' : 'text'}\r\n                    onClick={onClickSetFilterToCompleted}\r\n                >Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./TodoList\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Container, Grid, IconButton, Toolbar, Typography} from \"@mui/material\";\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport {\r\n    AddTodolistAC,\r\n    TodolistsType\r\n} from \"./state/todolists-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {ActionsRootType, AppRootStateType} from \"./state/store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\n\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const todolists = useSelector<AppRootStateType, TodolistsType[]>(state => state.todolists)\r\n    const dispatch = useDispatch<Dispatch<ActionsRootType>>()\r\n\r\n    const addNewTodolist = (title: string) => {\r\n        let action = AddTodolistAC(title)\r\n        dispatch(action)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Toolbar variant=\"dense\">\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" sx={{mr: 2}}>\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" color=\"inherit\" component=\"div\">\r\n                        TodoList\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '10px'}}\r\n                >\r\n                    <AddItemForm\r\n                        addItem={addNewTodolist}\r\n                        todolistsTitle={todolists.map(el => el.title)}\r\n                    />\r\n                </Grid>\r\n                <Grid container spacing={2}\r\n                      rowSpacing={1} columnSpacing={{xs: 1, sm: 2, md: 3}}\r\n                >\r\n                    {\r\n                        todolists.map(t => {\r\n\r\n                            return (\r\n                                <Grid>\r\n                                    <TodoList\r\n                                        key={t.id}\r\n                                        id={t.id}\r\n                                    />\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux />\r\n    </Provider>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"styleForTodolist\":\"TodoList_styleForTodolist__3ssp-\",\"marginToRemoveButton\":\"TodoList_marginToRemoveButton__1Sv-Q\",\"checkBoxForNewInput\":\"TodoList_checkBoxForNewInput__TguB3\",\"colorForError\":\"TodoList_colorForError__3qM11\",\"borderColorForError\":\"TodoList_borderColorForError__K1E4I\",\"filterForTasks\":\"TodoList_filterForTasks__Id49I\",\"completedTask\":\"TodoList_completedTask__3TIIU\"};"],"sourceRoot":""}